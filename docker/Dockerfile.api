# ============================================================================
# API Container - Lightweight Inference with FastAPI
# ============================================================================
# Build: docker build -t moe-api -f docker/Dockerfile.api .
# Run:   docker run -p 8000:8000 -v $(pwd)/models:/app/models moe-api

# Multi-stage build for smaller image
FROM python:3.10-slim as builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user \
    torch==2.0.0+cpu \
    torchvision==0.15.0+cpu \
    --index-url https://download.pytorch.org/whl/cpu

RUN pip install --no-cache-dir --user -r requirements.txt

# ============================================================================
# Final stage - Runtime
# ============================================================================
FROM python:3.10-slim

WORKDIR /app

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy Python packages from builder
COPY --from=builder /root/.local /root/.local

# Make sure scripts in .local are usable
ENV PATH=/root/.local/bin:$PATH

# Copy application code
COPY src/ ./src/
COPY params.yaml .

# Create directories
RUN mkdir -p models/weights

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run FastAPI with Uvicorn
CMD ["uvicorn", "src.serving.api:app", "--host", "0.0.0.0", "--port", "8000"]

# ============================================================================
# Usage Examples:
# ============================================================================
#
# 1. Build:
#    docker build -t moe-api -f docker/Dockerfile.api .
#
# 2. Run:
#    docker run -p 8000:8000 \
#      -v $(pwd)/models:/app/models \
#      moe-api
#
# 3. Access API:
#    http://localhost:8000/docs  (Swagger UI)
#    http://localhost:8000/health
#
# 4. Test prediction:
#    curl -X POST http://localhost:8000/predict \
#      -H "Content-Type: application/json" \
#      -d '{"features": {...}}'
# ============================================================================